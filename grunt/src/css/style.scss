@import url(base.css);
@mixin wh(){
	width: 100%;
	height: 100%;
}
@mixin op($ds){
	opacity:$ds;
	filer:alpha(opacity=$ds * 100);
}
@mixin border-radius($amount: 5px){
	-webkit-border-radius: $amount;
	-moz-border-radius: $amount;
	border-radius: $amount;
}
@mixin between($first,$last, $type: false) {
  @if $type == true {
    &:nth-of-type(n + #{$first}):nth-of-type(-n + #{$last}){
      @content;
    }
  }
  @else {
    &:nth-child(n + #{$first}):nth-child(-n + #{$last}){
      @content;
    }
  }
}
// li{
//   @include between(2,5) {
//     background: #f36;
//   }
// }
@mixin first($num, $type: false) {
  @if ($num ==1) and ($type == true) {
    &:first-of-type{
      @content;
    }
  }
  @if ($num == 1) and ($type == false) {
    &:first-child{
      @content;
    }
  }
  @if ($num !=1) and ($type == true) {
    &:nth-of-type(-n + #{$num}){
      @content;
    }
  }
  @if ($num != 1) and ($type == false) {
    &:nth-child(-n + #{$num}){
      @content;
    }
  }
}
// li{
//   @include first(5,false) {
//     background: #f36;
//   }
// }
@mixin last($num, $type: false) {
  @if ($num ==1) and ($type == true) {
    &:last-of-type{
      @content;
    }
  }
  @if ($num == 1) and ($type == false) {
    &:last-child{
      @content;
    }
  }
  @if ($num !=1) and ($type == true) {
    &:nth-last-of-type(-n + #{$num}){
      @content;
    }
  }
  @if ($num != 1) and ($type == false) {
    &:nth-last-child(-n + #{$num}){
      @content;
    }
  }
}
// li{
//   @include last(5,false) {
//     background: #f36;
//   }
// }
